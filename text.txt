import torch
import torchvision.transforms as transforms
from torchvision.datasets import CIFAR10
from torch.utils.data import DataLoader, Dataset

# Define the transformation to resize the image to 192x192
transform = transforms.Compose([
    transforms.Resize((192, 192)),
    transforms.ToTensor()
])

# Load the CIFAR-10 dataset
train_dataset = CIFAR10(root='./data', train=True, download=True, transform=transform)

def create_label_tensor(labels, img_size=(192, 192)):
    batch_size = len(labels)
    new_shape = (batch_size, 6, img_size[0], img_size[1])  # Shape: [batch_size, 6, 192, 192]
    new_labels = torch.zeros(new_shape, dtype=torch.long)

    for i in range(batch_size):
        label = labels[i]
        mask = torch.full((6, img_size[0], img_size[1]), label, dtype=torch.long)
        new_labels[i] = mask

    return new_labels

# Transform all labels in the train_dataset
all_labels = torch.tensor(train_dataset.targets)
transformed_labels = create_label_tensor(all_labels)

class CustomCIFAR10(Dataset):
    def __init__(self, original_dataset, transformed_labels):
        self.dataset = original_dataset
        self.transformed_labels = transformed_labels

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        image, _ = self.dataset[idx]
        label = self.transformed_labels[idx]
        return image, label

# Create a custom dataset with transformed labels
custom_train_dataset = CustomCIFAR10(train_dataset, transformed_labels)

# Use the custom dataset with DataLoader
train_loader = DataLoader(custom_train_dataset, batch_size=32, shuffle=True)

# Get a batch of training data
images, labels = next(iter(train_loader))

print("Resized image shape:", images.shape)  # Output: torch.Size([32, 3, 192, 192])
print("Transformed label shape:", labels.shape)  # Output: torch.Size([32, 6, 192, 192])
